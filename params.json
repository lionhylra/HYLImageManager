{"name":"HYLImageManager","tagline":"This is a convenience CRUD tool for image files in iOS file system","body":"# What is it?\r\n\r\nHYLImageManager is a convenience CRUD tool for image files in iOS file system. It is a simplified version of NSFileManager providing only simple CRUD methods with using a file name. This module is suitable for foundamental objective-c programmers who needs to save image or other file to persistent store. \r\n\r\nIt is simple enough to use, and also it is flexible enough to costomize.\r\n\r\nFor example, when you finish downloading a image, you may need to cache or store in local file system for later use. So you can just call <code>[[HYLImageManager defaultManager] saveImage:image withImageName:@\"demoImage.png\"</code>. When you want to get it back, just call <code>UIImage* image = [[HYLImageManager defaultManager] imageWithName:@\"demoImage.png\"</code>.\r\n\r\n\r\n# How to use?\r\n## 1. Initialize a instance of HYLImageManager. \r\nSelect one of the ninitializer below to get a HYLImageManager instance.\r\n```objective-c\r\n//Init the manager instance with the system directiory.\r\n//All images stored will be stored in a folder called \"UserDocuments\", to its original size without thumbnail. It will not be compressed.\r\n//The path will be \"/<NSSearchPathDirectory>/UserDocuments/xxx.jpg\"\r\n-(instancetype)initWithDirectory:(NSSearchPathDirectory)directory;\r\n\r\n//Init the manager with the system directory and folder name.\r\n//All images stored will be stored in the path specified in the pathComponents, to its original size without thumbnail. It will not be compressed.\r\n//The path will be \"/<NSSearchPathDirectory>/pathComponents[0]/pathComponents[1]/pathComponents[2]/.../xxx.jpg\"\r\n-(instancetype)initWithDirectory:(NSSearchPathDirectory)directory pathComponents:(nullable NSArray *)pathComponents;\r\n\r\n//Init the manager with the system directory, folder name and the maximum size of the image you want it be. When the image is saved to the disk, it will be resized to the maximum size you specify while keeping its ratio. If it's original size is smaller than the maximum size, it will not be resized.\r\n//e.g. if you specify the maximum size to be (800, 600) (800 is width), and image's original size is (1000,1000), it will be resized to (600,600)\r\n-(instancetype)initWithDirectory:(NSSearchPathDirectory)directory pathComponents:(NSArray *)pathComponents maxSize:(CGSize)maxSize;\r\n\r\n//Init a image manager with most customization\r\n-(instancetype)initWithDirectory:(NSSearchPathDirectory)directory pathComponents:(nullable NSArray *)pathComponents maxSize:(CGSize)maxSize thumbnailMaxSize:(CGSize)thumbnailMaxSize compressionQuality:(float)quality ignoreThumbnail:(BOOL)flag NS_DESIGNATED_INITIALIZER;\r\n\r\n//Init a shared instance with default configuration.\r\n+(instancetype)defaultManager;\r\n```\r\n## 2. Then use other methods as-is. \r\n\r\n##### fetch image\r\n<pre><code>\r\n-(UIImage *)imageWithName:(NSString *)imageName;\r\n</code></pre>\r\n##### save image \r\n<pre><code>\r\n- (void)saveImage:(UIImage *)image withImageName:(NSString *)imageName;\r\n</code></pre>\r\n##### save image using a generated name(timestamp). The image name will be returned.\r\n**Note, store the name or keep a reference of the name. You need use this name to fetch image again.**\r\n<pre><code>\r\n-(NSString *)saveImage:(UIImage *)image;\r\n</code></pre>\r\n##### delete image\r\n<pre><code>\r\n- (BOOL)deleteImageWithImageName:(NSString *)imageName error:(NSError **)error;\r\n</code></pre>\r\n##### rename image\r\n<pre><code>\r\n- (BOOL)renameImageFromImageName:(NSString *)oldImageName toNewImageName:(NSString *)newImageName error:(NSError **)error;\r\n</code></pre>\r\n##### get the path of an image\r\n<pre><code>\r\n-(NSString *)pathForImageName:(NSString *)fileName;\r\n</code></pre>\r\n##### check image existence\r\n<pre><code>\r\n-(BOOL)imageExistsForImageName:(NSString *)imageName;\r\n</code></pre>\r\n\r\n### Note\r\nFor more details about how to use these methods,  please refer to the header file.\r\n\r\n# Utility Classes\r\n\r\n### UIImage+Compress\r\nThis UIImage Category is used in all HYLImageManager to compress the image when the image is saved to disk. You can call the methods in this category whenever you like.\r\n\r\n### HYLFileManager\r\nThis is a more generic version of CRUD convenient tool targeting at NSData.\r\n\r\n# Bonus\r\n\r\n### HYLDownloadManager\r\nThis is a class used to handle concurrent downloading tasks and download file to yor desinated path. Initialize it like a HYLImageManager and use <code>- (NSURLSessionDownloadTask *)startDownloadTaskWithURL:(NSString *)urlString;</code> to create and start background downloading tasks. Use <code>- (NSURLSessionDownloadTask *)downloadingTaskWithURL:(NSString *)urlString;</code> to keep track of existing tasks. No matter your app enters background or terminated by system, these downloading tasks will keep going util finish as long as the network is available. \r\n\r\nCall <code>- (void)retrievingDownloadingTasks;</code> in UIApplicationDelegate when app become active to ensure the manager keep tracks of all ongoing download tasks. Use <code>- (NSURLSessionDownloadTask *)downloadingTaskWithURL:(NSString *)urlString;</code> to check if a task is ongoing.\r\n\r\nIf you want to monitor the progresses of all downloading tasks, just register your tableViewController to <code>kDownloadManagerProgressDidChangeNotification</code> notification. The notification.object is a instance of NSURLSessionDownloadTask, and notification.userinfo[kDownloadManagerUserInfoProgress] returns a float number between 0.0 and 1.0 indicate the progress of that task. Each time the progress changes, the task will send this notification.\r\n\r\n![Alt downloading](https://github.com/lionhylra/HYLImageManager/blob/master/downloading.gif?raw=true)\r\n\r\n# Contact Author\r\nlionhylra@gmail.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}